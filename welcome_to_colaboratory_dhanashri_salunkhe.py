# -*- coding: utf-8 -*-
"""Welcome To Colaboratory Dhanashri salunkhe

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18lSDdU_I50SN8ojG1XXkdNh7bTec3Sbn
"""



"""#**AUTHOR** : **SALUNKHE** **DHANASHRI** **KESHAV** 
# **THE** **SPARK** **FOUNDATION**
# **TASK** **1** -  **PREDICTION** **USING** **SUPERVISED** **ML**
**Problem** **Statement**  : 
**Predict** **the** **percentage** **of** **an** **student** **based** **on** **the** **no**.**of** **study** **hours**.

**Dataset** : http://bit.ly/w-data

# IMPORTING LIBRARIES
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""## LOADING THE DATASET"""

data_df = pd.read_csv('http://bit.ly/w-data')
data_df.head()

data_df.shape

"""AS WE CAN SEE THAT THERE ARE **25 ROWS** AND **2 COLUMNS** IN THE DATASET

# DATA EXPLORATION
"""

data_df.info()

data_df.describe()

data_df.isnull().sum()

"""THERE IS **NO NULL**VALUES IN THE DATASET.

##DATA VISUALIZATION 

LET'S **PLOT** OUR DATA POINTS ON** 2-D GRAPH** TO **VISUALIZE** OUR DATSET AND SEE IF WE CAN MANUALLY FIND ANY RELATIONSHIP BETWEEN THE** DATA**.
"""

sns.set_style('darkgrid')
plt.plot(data_df['Hours'],data_df['Scores'],'oc')
plt.xlabel('Hours',fontsize = 20)
plt.ylabel('Scores',fontsize = 20)
plt.title('Hours Vs. Scores',fontsize = 20)
plt.legend(['Scores']);

"""FROM THE GRAPH,WE CAN CLEARLY SEE THAT THERE IS A POSITIVE LINEAR RELATION  BETWEEN THE NUMBER OF HOURS  STUDIED AND PERCENTAGE OF SCORE. """

sns.regplot(x = data_df['Hours'], y = data_df['Scores'])
plt.title('Regression Plot')
plt.xlabel('Hours studies')
plt.ylabel('Percentage');

"""FROM THE **REGRESSION PLOT** IT IS CONFIRMED THAT THE **PARAMETERS** ARE **POSITIVELY** CORRELATED.

#**BOXPLOT** **OF** **DATASET**
"""

sns.boxplot(data=data_df[['Hours','Scores']]);

"""FROM THE ABOVE PLOT,WE CAN CLEARLY SEE THAT THERE IS NO OUTLIERS IS THE DATA.

#**SPLITTING** **THE** **DATASET**
"""

X = data_df.iloc[:,:-1].values
y = data_df.iloc[:,-1].values

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,y,random_state = 0)

X_train.shape, X_test.shape

"""HERE WE CAN SEE THAT **80%** OF THE DATA IS USED FOR **TRAINING** AND THE REST **20%** IS USED FOR **TESTING**.


#**TRAINING THE MODEL**

WE WILL THE **80%** OF THE TRAINING DATA TO **TRAIN** THE MODEL.
"""

from sklearn.linear_model import LinearRegression
lg = LinearRegression()
lg.fit(X_train,Y_train)

line = lg.coef_ * X + lg.intercept_
plt.scatter(data_df['Hours'],data_df['Scores'])
plt.plot(X,line)
plt.xlabel('Hours')
plt.ylabel('Percentage');

"""#**MAKING PREDICTION**

NOW, WE WILL **TEST** OUR ALGORITHM WITH THE REST **20%** OF THE DATA THAT WE HAVE **SPLITTED** AND **MAKE PREDICTIONS**.
"""

y_pred = lg.predict(X_test).round()
prediction = pd.DataFrame({'Hours': [i[0] for i in X_test] ,'Predicted Scores':[y for y in y_pred]})
prediction

"""#**COMPAIRING ACTUAL SCORE VS.PREDICTED SCORE**"""

pred = pd.DataFrame({'Actual Score': Y_test, 'Predicted Score%':y_pred})
pred

"""**WHAT WILL BE PREDICTED SCORE IF A STUDENT STUDIES FOR 9.25 HRS/DAY?** """

hours = np.array([[9.25]])
pred = lg.predict(hours)
print('No. of hours = {}'.format(hours[0][0]))
print('Predicted Score = %.2f'%pred)

"""**ACCORDING TO THE REGRESSION MODEL IF A STUDENT STUDIES 9.25 HOURS A DAY,HE/SHE IS LIKELY TO SCORE 93.89 MARKS.**


**EVALUATING THE MODEL**

"""

from sklearn.metrics import mean_absolute_error
print('Mean absolute error = %.2f'%mean_absolute_error(Y_test,y_pred))

"""SMALL VALUE OF   **MEAN ABSOLUTE ERROR**  STATES THAT THE CHANCES OF ERROR OR WRONG FORECASTING THROUGH THE MODEL ARE VERY  **LESS**.


#**THANK YOU**


"""